
#pragma once

#include "typedef.h"
#include "template.h"

template <class T> class CArrRef;
template <class T> class DynArrRef;

class Cone3d;
class Spin3d;
class Plane3d;
class Vector3d;
class Sphere3d;
class Segment3d;
class Triangle3d;
class Cylinder3d;
class Ellipsoid3d;
class Rectangle3d;
class Cuboid3d;

namespace Shev
{
    class Facet;
    class Polyhedron;
}

using namespace Shev;

//**************************** 17.11.2012 *********************************//
//
//                            Объём фигуры
//
//**************************** 17.11.2012 *********************************//

double volume ( const Sphere3d & fig ); // Объём шара

double volume ( const Ellipsoid3d & fig ); // Объём эллипсоида

double volume ( const Cuboid3d & fig ); // Объём параллелепипеда

double volume ( const Cylinder3d & fig ); // Объём цилиндра

double volume ( const Cone3d & fig ); // Объём конуса

double volume ( const Polyhedron & fig ); // Объём многогранника


//**************************** 17.11.2012 *********************************//
//
//                        Площади поверхностей
//
//**************************** 12.06.2017 *********************************//

double getArea ( const Facet & facet, CArrRef<Vector3d> vert ); // Площадь грани многогранника
double getArea ( const Polyhedron       & ); // Площадь поверхности многогранника
double getArea ( const Triangle3d       & ); // Площадь поверхности треугольника с двух сторон
double getArea ( const Sphere3d         & );
double getArea ( const Ellipsoid3d      & );
double getArea ( const Cuboid3d         & );
double getArea ( const Cylinder3d       & );
double getArea ( const Cone3d           & );


//**************************** 10.10.2009 *********************************//
//
//            Определение габаритов множества точек
//
//**************************** 02.09.2010 *********************************//

Def<Segment3d> dimensions ( CArrRef<Vector3d> point );


//**************************** 08.01.2009 *********************************//
//
//          Диаметр множества точек вдоль заданного направления
//
//**************************** 08.01.2009 *********************************//

double diameterPnt ( CArrRef<Vector3d> point, const Vector3d & dir, nat & imin, nat & imax );

double diameterPnt ( CArrRef<Vector3d> point, const Vector3d & dir );


//**************************** 09.12.2017 *********************************//
//
//               Минимальный диаметр множества точек
//
//**************************** 09.12.2017 *********************************//

double diameterPnt ( CArrRef<Vector3d> point );


//**************************** 03.06.2017 *********************************//
//
//      Вычисление квадрата расстояния от точки до треугольника
//
//**************************** 24.06.2017 *********************************//

double getDistance2 ( const Triangle3d & t, const Vector3d & p );


//**************************** 27.01.2018 *********************************//
//
//          Вычисление расстояния от точки до прямоугольника
//
//**************************** 27.01.2018 *********************************//

double getDistance ( const Rectangle3d & r, const Vector3d & p );


//**************************** 15.08.2009 *********************************//
//
//    Вычисление расстояния от точки p до границы эллипсоида
//    a, b, c - это значения полуосей эллипсоида
//    d - это расстояние ( отрицательное, если точка внутри эллипсоида )
//    r - это ближайшая точка на границе эллипсоида
//    Возвращает false, если среди чисел a, b, c есть неположительные
//
//**************************** 15.08.2009 *********************************//

bool getDistanceEld ( double a, double b, double c, const Vector3d & p, double & d, Vector3d & r );


//****************** 28.08.2003 *******************************//
//
//      Сфера построенная по трём точкам.
//      o - центр сферы, q - квадрат радиуса.
//
//*************************************************************//

bool getSphere ( Vector3d a, Vector3d b, const Vector3d & c, Vector3d & o, double & q );


//****************** 28.08.2003 *******************************//
//
//      Сфера построенная по четырём точкам.
//      o - центр сферы, q - квадрат радиуса.
//
//*************************************************************//

bool getSphere ( Vector3d a, Vector3d b, Vector3d c, const Vector3d & d, Vector3d & o, double & q );


//****************** 11.04.2010 *******************************//
//
//      Сфера построенная по четырём плоскостям
//      Расстояния до центра сферы отрицательные
//
//****************** 11.04.2010 *******************************//

Def<Sphere3d> spherePPPP ( const Plane3d & a, const Plane3d & b, const Plane3d & c, const Plane3d & d );


//****************** 23.01.2010 *******************************//
//
//      Выпуклая оболочка точек в пространстве
//
//****************** 23.01.2010 *******************************//

Polyhedron & convexHull ( CArrRef<Vector3d> vert, Polyhedron & poly );


//****************** 20.11.2003 *******************************//
//
//      Получение плоскостей выпуклой оболочки
//
//****************** 03.01.2011 *******************************//

DynArrRef<Plane3d> & convexHull ( CArrRef<Vector3d> point, DynArrRef<Plane3d> & plane );


//****************** 04.11.2014 *******************************//
//
//      Выпуклая оболочка многогранника
//
//****************** 04.11.2014 *******************************//

Polyhedron & convexHull ( const Polyhedron & inner, Polyhedron & outer );


//****************** 21.08.2012 *******************************//
//
//      Проверка многогранника на выпуклость
//
//****************** 21.08.2012 *******************************//

bool isConvex ( const Polyhedron & poly );


//****************** 22.04.2018 *******************************//
//
//      Получение поворота совмещающего пары векторов
//
//****************** 22.04.2018 *******************************//

Spin3d makeSpin3d ( CArrRef<Set2<Vector3d> > data );
