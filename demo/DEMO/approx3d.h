
#pragma once

#include "ShevArray.h"
#include "Vector3d.h"

namespace Shev
{
    class Polyhedron;
}

using namespace Shev;

//************************* 19.01.2006 ******************************//
//
//      Аппроксимация прямой множеств точек и отрезков.
//      Минимум суммы квадратов расстояний.
//      Вычисляются направление вдоль прямой ( единичный вектор dir )
//      и точка point через которую проходит прямая 
//      ( она является центром масс ).
//
//************************* 02.09.2010 ******************************//

Def<Line3d> getLine2 ( CArrRef<Vector3d> point );

Def<Line3d> getLine2 ( CArrRef<Vector3d> point, CArrRef<double> mass );

Def<Line3d> getLine2 ( CArrRef<Segment3d> segm );


//************************* 02.05.2013 ******************************//
//
//          Аппроксимация прямой множеств точек
//          Минимум максимума расстояний ( r )
//
//************************* 14.01.2018 ******************************//

Line3d getLineU ( CCArrRef<Vector3d> & data, double & r );


//************************* 19.01.2006 ******************************//
//
//      Аппроксимация плоскостью множеств точек и отрезков
//      Минимум суммы квадратов расстояний
//
//************************* 29.09.2010 ******************************//

Plane3d getPlane2 ( CCArrRef<Vector3d> & point );

Plane3d getPlane2 ( CCArrRef<Vector3d> & point, CCArrRef<double> & mass );

Plane3d getPlane2 ( CCArrRef<Segment3d> & segm );


//************************ 05.02.2010 *******************************//
//
//          Аппроксимация плоскостью множества точек
//          Минимум максимума расстояний ( r )
//
//************************ 09.12.2017 *******************************//

Plane3d getPlaneU ( CCArrRef<Vector3d> & point, double & r );

Plane3d getPlaneU ( CCArrRef<Vector3d> & point );


//************************ 23.06.2005 *******************************//
//
//              Аппроксимация точек сферой
//              Sum ( Ri^2 - R^2 )^2 -> min
//
//************************ 02.05.2010 *******************************//

Def<Sphere3d> getSpherePnt22 ( CArrRef<Vector3d> p );


//************************ 15.05.2010 *******************************//
//
//              Аппроксимация точек сферой
//                Sum ( Ri - R )^2 -> min
//
//************************ 15.05.2010 *******************************//

Def<Sphere3d> getSpherePnt2 ( CArrRef<Vector3d> p );


//************************ 15.05.2009 *******************************//
//
//          Аппроксимация многогранника сферой
//
//************************ 03.09.2010 *******************************//

Def<Sphere3d> getSpherePlg ( const Polyhedron & poly );


//************************ 28.11.2008 *******************************//
//
//          Аппроксимация многогранника эллипсоидом
//
//************************ 03.09.2010 *******************************//

Def<Ellipsoid3d> getEllipsoidPlg ( const Polyhedron & poly );


//************************ 15.05.2009 *******************************//
//
//     Аппроксимация многогранника прямоугольным параллелепипедом
//
//************************ 04.09.2010 *******************************//

Def<Cuboid3d> getCuboid ( const Polyhedron & poly );


//************************ 11.04.2008 *******************************//
//
//      Вычисление ближайшей точки к заданным плоскостям
//      Минимум суммы абсолютных расстояний ( 1-норма )
//
//************************ 22.05.2010 *******************************//

Def<Vector3d> getNearPoint1 ( CArrRef<Plane3d> plane, nat & ix1, nat & ix2, nat & ix3 );
Def<Vector3d> getNearPoint1 ( CArrRef<Plane3d> plane );


//************************ 30.06.2013 *******************************//
//
//      Вычисление ближайшей точки к заданным плоскостям
//      Минимум p-нормы ( p = 4/3, 6/5, 8/7, 10/9 )
//
//************************ 30.06.2013 *******************************//

Def<Vector3d> getNearPoint4_3 ( CArrRef<Plane3d> plane );
Def<Vector3d> getNearPoint6_5 ( CArrRef<Plane3d> plane );
Def<Vector3d> getNearPoint8_7 ( CArrRef<Plane3d> plane );
Def<Vector3d> getNearPoint10_9( CArrRef<Plane3d> plane );


//************************ 29.01.2005 *******************************//
//
//      Вычисление ближайшей точки к заданным плоскостям
//      Минимум суммы квадратов расстояний ( 2-норма )
//
//************************ 22.05.2010 *******************************//

Def<Vector3d> getNearPoint2 ( CArrRef<Plane3d> plane );
Def<Vector3d> getNearPoint2 ( CArrRef<Plane3d> plane, CArrRef<double> mass );


//************************ 22.05.2010 *******************************//
//
//      Вычисление ближайшей точки к заданным плоскостям
//      Минимум максимального расстояния ( бесконечная норма )
//
//************************ 22.05.2010 *******************************//

Def<Vector3d> getNearPointU ( CArrRef<Plane3d> plane );


//************************* 03.12.2016 ******************************//
//
//    Робастный метод вычисления ближайшей точки к заданным плоскостям
//    Заполняет массив весов (mass) значениями от 0 до 1
//
//************************* 11.12.2019 ******************************//

Def<Vector3d> getNearPointR ( CCArrRef<Plane3d> & plane, ArrRef<double> & mass );


//************************ 03.02.2005 *******************************//
//
//      Вычисление ближайшей точки к заданным прямым
//      Минимум суммы квадратов расстояний ( 2-норма )
//
//************************ 13.09.2010 *******************************//

Def<Vector3d> getNearPoint2 ( CArrRef<Line3d> line );


//************************ 10.03.2012 *******************************//
//
//      Вычисление ближайшей точки к заданным прямым
//      Минимум максимального расстояния ( бесконечная норма )
//
//************************ 10.03.2012 *******************************//

Def<Vector3d> getNearPointU ( CArrRef<Line3d> line );
